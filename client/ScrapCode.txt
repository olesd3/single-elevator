/*
	// Defining a boolean value that dictates whether or not we have a current order
	haveCurrentOrder := false

	for {
		switch {
			case !haveCurrentOrder:
				// Case 1: No current order exists:
				receivedNewOrder := <- drv_zeroToOneOrderTrigger
				if receivedNewOrder {
					haveCurrentOrder = true
				}

			case haveCurrentOrder:
				// Case 2: A current order exists
				haveCompletedOrder := false
				for !haveCompletedOrder {

					// Section_START - Read order floor from currentOrder
					mu4.Lock()
					currentOrderPos := float32(currentOrder.floor) 
					fmt.Printf("Current position: %.2f\n", currentOrderPos)
					mu4.Unlock()
					// Section_END - Read order floor from currentOrder


					switch {
						case currentOrderPos > extractPos():
							mutex_d.Lock()
							elevio.SetMotorDirection(elevio.MD_Up)
							*d = elevio.MD_Up
							mutex_d.Unlock()

							time.Sleep(20 * time.Millisecond) // Delay by 10 ms to avoid over-polling
						case currentOrderPos < extractPos():
							mutex_d.Lock()
							elevio.SetMotorDirection(elevio.MD_Down)
							*d = elevio.MD_Down
							mutex_d.Lock()

							time.Sleep(20 * time.Millisecond) // Delay by 10 ms to avoid over-polling 
						case currentOrderPos == extractPos():
							fmt.Printf("CurrentOrderPos is equal to current position and we're stopping\n")
							mutex_d.Lock()
							elevio.SetMotorDirection(elevio.MD_Stop)
							*d = elevio.MD_Stop
							mutex_d.Unlock()

							mu1.Lock()
							mu4.Lock()
							
							// TODO: Need to convert Order to a.Button elevio.SetButtonLamp(a.Button, currentOrder.Floor, true)
							
							PopOrders()                     	// When we arrive at the current order, delete the relevant orders from elevatorOrders
							

							if (len(elevatorOrders) == 0) { 	// After deleting the relevant orders at our floor => find, if any, the next currentOrder
								haveCurrentOrder = false
							} else {
								currentOrder = elevatorOrders[0]
							}
							
							mu4.Unlock()
							mu1.Unlock()

							// Section_Start - OrderExpedition at floor
							time.Sleep(3000 * time.Millisecond)
							haveCompletedOrder = true
							// Section_End - OrderExpedition at floor
					}
				}

		}
	}
	*/